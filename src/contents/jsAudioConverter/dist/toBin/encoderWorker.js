let waveWorker,alawmulaw={mulaw:{BIAS:132,CLIP:32635,encodeTable:[0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],decodeTable:[0,132,396,924,1980,4092,8316,16764],encodeSample:function(e){let t,r,n,i;return t=e>>8&128,0!=t&&(e=-e),(e+=this.BIAS)>this.CLIP&&(e=this.CLIP),r=this.encodeTable[e>>7&255],n=e>>r+3&15,i=~(t|r<<4|n),i},decodeSample:function(e){let t,r,n,i;return t=128&(e=~e),r=e>>4&7,n=15&e,i=this.decodeTable[r]+(n<<r+3),0!=t&&(i=-i),i},encode:function(e){let t=new Uint8Array(e.length);for(let r=0,n=e.length;r<n;r++)t[r]=this.encodeSample(e[r]);return t},decode:function(e){let t=new Int16Array(e.length);for(let r=0,n=e.length;r<n;r++)t[r]=this.decodeSample(e[r]);return t}},alaw:{LOG_TABLE:[1,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],encodeSample:function(e){let t,r=~(e=-32768==e?-32767:e)>>8&128;if(r||(e*=-1),e>32635&&(e=32635),e>=256){let r=this.LOG_TABLE[e>>8&127];t=r<<4|e>>r+3&15}else t=e>>4;return 85^t^r},decodeSample:function(e){let t=0;128&(e^=85)&&(e&=-129,t=-1);let r=4+((240&e)>>4),n=0;return n=4!=r?1<<r|(15&e)<<r-4|1<<r-5:e<<1|1,n=0===t?n:-n,8*n*-1},encode:function(e){let t=new Uint8Array(e.length);for(let r=0;r<e.length;r++)t[r]=this.encodeSample(e[r]);return t},decode:function(e){let t=new Int16Array(e.length);for(let r=0;r<e.length;r++)t[r]=this.decodeSample(e[r]);return t}}};function WaveWorker(){this.recorderBufferLength=0,this.recorderBuffers=[],this.originalSampleRate=void 0,this.desiredSampleRate=void 0,this.numberOfChannels=void 0,this.bitsPerSample=null,this.singleProcessSize=0,this.fadeOutTime=!1,this.fadeOutRatio=.25,this.maxBinFileSize=196608,this.binHeaderSize=512,this.fileSizeLimit=!1,this.alawmulaw=alawmulaw}self.onmessage=function(e){switch(e.data.command){case"init":waveWorker.init(e.data);break;case"encode":waveWorker.record(e.data.buffers);break;case"done":waveWorker.exportWAV();break;case"getBuffer":waveWorker.getBuffer();break;case"close":waveWorker.clear()}},WaveWorker.prototype.init=function(e){console.info("worker init config:",JSON.stringify(e,null,"    ")),this.originalSampleRate=e.originalSampleRate||48e3,this.desiredSampleRate=e.desiredSampleRate||8e3,this.numberOfChannels=e.numberOfChannels||1,this.bitsPerSample=e.bitsPerSample||16,this.fileSizeLimit=e.fileSizeLimit||!1,this.encoderType=e.encoderType,this.initBuffers()},WaveWorker.prototype.initBuffers=function(){for(let e=0;e<this.numberOfChannels;e++)this.recorderBuffers[e]=[]},WaveWorker.prototype.clear=function(){this.recorderBufferLength=0,this.recorderBuffers=[],this.initBuffers()},WaveWorker.prototype.record=function(e){for(let t=0;t<this.numberOfChannels;t++)this.recorderBuffers[t].push(e[t]);this.recorderBufferLength+=e[0].length,this.convertedSizeCalculate()},WaveWorker.prototype.convertedSizeCalculate=function(){let e=this.getDownSampledBuffer(),t=this.binHeaderSize+e.length,r=this.maxBinFileSize-t;this.singleProcessSize||(this.singleProcessSize=e.length),t>=this.maxBinFileSize?(console.warn("File exceeds limit, stop converting!"),self.postMessage({message:"fileExceedsLimit"})):r<=this.maxBinFileSize*this.fadeOutRatio&&(this.fadeOutTime||(console.warn("File conversion remaining 25 percent~"),this.fadeOutTime=!0,self.postMessage({message:"fadeOutTime",remainingTimes:r/this.singleProcessSize})))},WaveWorker.prototype.getBuffer=function(){let e=this,t=[];for(let r=0;r<e.numberOfChannels;r++)t.push(e.mergeBuffers(e.recorderBuffers[r],e.recorderBufferLength));self.postMessage({message:"getBuffer",data:t})},WaveWorker.prototype.mergeBuffers=function(e,t){let r=new Float32Array(t),n=0;for(let t=0;t<e.length;t++)r.set(e[t],n),n+=e[t].length;return r},WaveWorker.prototype.interleave=function(e,t){let r=e.length+t.length,n=new Float32Array(r),i=0,a=0;for(;i<r;)n[i++]=e[a],n[i++]=t[a],a++;return n},WaveWorker.prototype.floatTo16BitPCM=function(e,t,r){for(let n=0;n<r.length;n++,t+=2){let i=Math.max(-1,Math.min(1,r[n]));e.setInt16(t,i<0?32768*i:32767*i,!0)}},WaveWorker.prototype.float32To8BitMuLaw=function(e,t,r){console.warn("float32To8BitMuLaw!!");let n=new Int16Array(r.length);for(let e=0;e<r.length;e++){let t=Math.max(-1,Math.min(1,r[e]));n[e]=t<0?32768*t:32767*t}let i=this.alawmulaw.mulaw.encode(n);for(let r=0;r<i.length;r++,t+=1)e.setUint8(t,i[r])},WaveWorker.prototype.downSampleBuffer=function(e,t){if(t===this.originalSampleRate)return e;if(t>this.originalSampleRate)throw"down sampling rate show be smaller than original sample rate";let r=this.originalSampleRate/t,n=Math.round(e.length/r),i=new Float32Array(n),a=0,o=0;for(;a<i.length;){let t=Math.round((a+1)*r),n=0,s=0;for(let r=o;r<t&&r<e.length;r++)n+=e[r],s++;i[a]=n/s,a++,o=t}return i},WaveWorker.prototype.getDownSampledBuffer=function(){let e,t,r=this,n=[];for(let e=0;e<r.numberOfChannels;e++)n.push(r.mergeBuffers(r.recorderBuffers[e],r.recorderBufferLength));return 2===r.numberOfChannels?(e=r.interleave(n[0],n[1]),t=r.downSampleBuffer(e,r.desiredSampleRate)):(e=n[0],t=r.downSampleBuffer(e,r.desiredSampleRate)),t},WaveWorker.prototype.writeString=function(e,t,r){for(let n=0;n<r.length;n++)e.setUint8(t+n,r.charCodeAt(n))},WaveWorker.prototype.encodeWAV=function(e){console.warn("encode wave");let t=new ArrayBuffer(44+2*e.length),r=new DataView(t);return this.writeString(r,0,"RIFF"),r.setUint32(4,36+2*e.length,!0),this.writeString(r,8,"WAVE"),this.writeString(r,12,"fmt "),r.setUint32(16,16,!0),r.setUint16(20,1,!0),r.setUint16(22,this.numberOfChannels,!0),r.setUint32(24,this.desiredSampleRate,!0),r.setUint32(28,4*this.desiredSampleRate,!0),r.setUint16(32,2*this.numberOfChannels,!0),r.setUint16(34,this.bitsPerSample,!0),this.writeString(r,36,"data"),r.setUint32(40,2*e.length,!0),this.floatTo16BitPCM(r,44,e),r},WaveWorker.prototype.encodeGRPBin=function(e){let t;console.warn("encode grp bin, samples length "),e.length%2==0?t=new ArrayBuffer(this.binHeaderSize+e.length):(t=new ArrayBuffer(this.binHeaderSize+e.length+1),console.log("padding supplement."));let r=new DataView(t),n=r.byteLength/2;r.setUint32(0,n,!1);let i=0;r.setUint16(4,i,!1),r.setUint8(6,1);let a=new Date;r.setUint16(10,a.getFullYear(),!1),r.setUint8(12,a.getMonth(),!1),r.setUint8(13,a.getDate(),!1),r.setUint8(14,a.getHours(),!1),r.setUint8(15,a.getMinutes(),!1),this.writeString(r,16,"ring.bin"),this.float32To8BitMuLaw(r,this.binHeaderSize,e);for(let e=0;e<r.byteLength;e+=2)i+=r.getInt16(e);return i=65536-i,r.setUint16(4,i,!1),r},WaveWorker.prototype.exportWAV=function(){let e=this.getDownSampledBuffer(),t=this.binHeaderSize+e.length,r=this.maxBinFileSize-this.binHeaderSize;t>r&&(e=e.slice(0,r),console.warn("The size of ring.bin should not exceed 196608 Byte (192KB)"));let n=this.encodeGRPBin(e);self.postMessage({message:"done",data:n})},waveWorker=new WaveWorker,self.postMessage({message:"ready"});